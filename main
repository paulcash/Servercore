package main;

import java.net.CookieManager;
import java.util.logging.Logger;

import org.spongepowered.api.Game;
import org.spongepowered.api.entity.Player;
import org.spongepowered.api.event.Subscribe;
import org.spongepowered.api.event.entity.EntitySpawnEvent;
import org.spongepowered.api.event.player.AsyncPlayerChatEvent;
import org.spongepowered.api.event.player.PlayerEvent;
import org.spongepowered.api.event.state.PreInitializationEvent;
import org.spongepowered.api.event.state.ServerStartedEvent;
import org.spongepowered.api.event.state.ServerStartingEvent;
import org.spongepowered.api.event.state.ServerStoppingEvent;
import org.spongepowered.api.plugin.Plugin;
import org.spongepowered.api.util.command.CommandCallable;

@Plugin(id = "Randomid", name = "ServerCore-Events", version = "0.1")
public class main {

	Game game;
	Logger logger;

	// Ahead is the code for the servercore chatbot


	
	
	
	
	@SuppressWarnings("unused")
	@Subscribe
	public void onChatEvent(AsyncPlayerChatEvent event) {
		String message = event.getMessage();
		Player player = event.getPlayer();
		if (message.equalsIgnoreCase("Hello")) {
			player.sendMessage("Hello");
		} else if (message.contains("How do I get to the nether?")) {
			player.sendMessage("Hello"
					+ player.getName()
					+ "! You need obsidian to build a nether portal! Mine to get obsidian!");
		} else if (message.contains("help")) {
			event.getPlayer().sendMessage(
					"Hey " + event.getPlayer() + " How may i assist you?");
			event.getPlayer()
					.sendMessage(
							"Need help with the nether? type (how do i get to the nether )in chat ");
			event.getPlayer().sendMessage("About to die? type (heal) in chat ");
			event.getPlayer().sendMessage(
					"Want the server version? type (version) in chat");
			event.getPlayer().sendMessage(
					"type (Help me) to recieve kinda help");
			event.getPlayer().sendMessage("Current Commands: ");
			event.getPlayer().sendMessage("Current Commands: ");
			event.getPlayer().sendMessage("Current Commands: ");
			event.getPlayer().sendMessage("Current Commands: ");
			event.getPlayer().sendMessage("Current Commands: ");
		} else if (message.contains("heal")) {
			player.setHealth(20);
		} else if (message.contains("version")) {
			player.sendMessage("Version " + event.getGame().getAPIVersion());
		} else if (message.contains("chatbot")) {

			event.getPlayer().sendMessage("What " + event.getPlayer() + " ??!");
		} else if (message.contains("help me")) {
			event.getPlayer()
					.sendMessage(
							"What what happened Why are you yelling at me! Siriously take it up with the admin not the chatbot!");
		} else if (message.contains("servercore")) {
			player.sendMessage("Servercore version 0.5");
         
		}

	}

	@Subscribe
	public void Stopevent(ServerStoppingEvent event) {
		event.getGame().broadcastMessage("Great you broke it!");

	}

	@Subscribe
	public void Logger(ServerStartingEvent event) {
                 plugin.start.confirm
                 logger.info("root. Starting Protocol.apimerge")
                 logger.info("root. Starting Protocol.ApiLoad")
                 logger.info("API. Pre-Init Starting... Please Wait")
                 logger.info("API. Pre-Init Finished... Standby")
                 logger.info("API. Init Starting... Please Wait")
                 logger.info("API. Init Finished (if.else.fail.="NO") Yes... Standby")
                 logger.info("API. Status = 100% - Dump? YES, Init? YES, Pre-Init Fail? NO")
                 logger.info("Current Status. Status = 30%, Dump? 40%, Init? 35%, Pre-Init? 40%, Core Dumps? 50%")
                 logger.info("Status... ALL Api's Merged ;Status=100%; Standby")
                 logger.info("root. Starting protocol.mainload")
		logger.info("MAIN. Pre-Init Starting... Please Wait")
		logger.info("MAIN. Pre-Init Finished... Standby")
		logger.info("MAIN. Init Starting... Please Wait")
		logger.info("MAIN. Init Finished (if.else.fail.=NO") Yes... Standby")
		logger.info("root. Confirming Load... %:2 Failed... Please Wait")
		logger.info("root. Standby....")
		logger.info("root. Starting Protocol.apisync")
		logger.info("APISYNC. Finished 100%")
		logger.info("root. Starting Protocol.LatchGame")
		logger.info("LATGAME. Starting Latching... Standby")
		logger.info("LATGAME. Finished. >99%:... Standby")
		logger.info("root. Starting Lines 60,000 < ... Standby")
		logger.info("LOAD. Fully Loaded >99% ")
		logger.info("Main API Fully loaded and working... Standby")
		logger.info("ALL API's Fully Loaded And Working... Standby")
		logger.info("Main Plugin Fully Loaded And working... Standby")
		logger.info("rootcheck = 1")
		logger.info("Confirmed. Plugin and all assets Fully loaded and working")
		logger.info("Hello World!")
		logger.info("That took Approx. 21.738s")
		logger.info("Logging Started")
		logger.info("User control Enabled")
		logger.info("Client Control Enabled")
		logger.info("Spy Client Enabled")
		logger.info("DRM Client Enabled")
		logger.info("Main Core Enabled")
		logger.info("ChatCommands v0.4 Enabled")
		logger.info("All Interactions Enabled")
		logger.info("...DONE 19 Interactions Found and hooked in")
		logger.info("Fails = 0, Good = 19")
		logger.info("MainClientPatcher Enabled")
		logger.info("System Control Enabled")
		logger.info("Backend Control Enabled")
		logger.info("Backend Support Enabled")
		
		
		
		
		

	}

	@Subscribe
	public void gameevent(PreInitializationEvent event) {

		game = event.getGame();

	}

	@Subscribe
	public void onDisable(ServerStoppingEvent event) {

		logger.info("ServerCore has been disabled");
	}

	@Subscribe
	public void Servercore(ServerStartedEvent event) {

		if (game.getPluginManager().getPlugins().contains("ServerCore"))
			;
		logger.info("ServerCore Loaded and working");

	}

}
